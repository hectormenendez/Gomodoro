"use strict";

var _todoistJs = _interopRequireDefault(require("todoist-js"));

var _rxjs = require("rxjs");

var _config = require("../config.json");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Todoist = new _todoistJs.default(_config.todoist.token);

const Ids = _config.todoist.labels.map(label => label.id);

const Vals = _config.todoist.labels.map(label => label.value);

const items$ = _rxjs.Observable.fromPromise(Todoist.sync()).map(state => state.items).share();

const $fromInput = text => _rxjs.Observable.create(observer => {
  process.stdout.write(`${text}\n`);
  process.stdin.setEncoding('utf8');
  process.stdin.on('data', data => {
    observer.next(String(data).trim());
    observer.complete();
  });
});

const $fromId = id => _rxjs.Observable.fromPromise(Todoist.items.get(id)).switchMap(({
  item
}) => items$.map(items => items.filter(node => String(node.parent_id) === String(id))).switchMap(children => !children.length ? _rxjs.Observable.of([]) : _rxjs.Observable.from(children).mergeMap(child => $fromId(child.id)).toArray()).map(children => _extends({}, item, {
  children
})));

const parseItem = item => {
  const gomodoros = [];
  item.children.forEach(child => {
    if (child.children.length) child = parseItem(child);
    const matches = child.labels.filter(label => Ids.indexOf(label) !== -1);
    if (matches.length) gomodoros.push(...matches);
  });

  if (gomodoros.length) {
    const sum = gomodoros.map(gomodoro => _config.todoist.labels.filter(({
      id
    }) => id === gomodoro)[0].value).reduce((acc, cur) => acc + cur, 0);
    let value = Vals[0];
    Vals.forEach(v => Math.abs(sum - v) < Math.abs(sum - value) && (value = v));
    item.labels = item.labels.filter(label => Ids.indexOf(label) === -1).concat(_config.todoist.labels[Vals.indexOf(value)].id);
  }

  delete item.children;
  return item;
};

const input$ = $fromInput('Type the ID for the item to calculate:');
const target$ = input$.map(input => parseInt(input, 10)).switchMap(id => $fromId(id)).catch(err => function (e) {
  throw e;
}(`Invalid identifier: ${err.message}`)).map(item => parseItem(item)).switchMap(item => {
  const params = {
    labels: item.labels
  };
  Todoist.items.update(item.id, params);
  return Todoist.commit().then(() => item);
}).switchMap(({
  labels
}) => labels.filter(id => Ids.indexOf(id) !== -1)).map(value => `🍎 ${_config.todoist.labels[Ids.indexOf(value)].value}`);
target$.subscribe(response => console.log('Response:', response), error => {
  console.error('Error:', error);
  process.exit(1);
}, () => {
  console.log('DONE');
  process.exit(0);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9obWVuZW5kZXovU291cmNlL2V0b3IvR29tb2Rvcm8vYmFjay9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiVG9kb2lzdCIsInRva2VuIiwiSWRzIiwibGFiZWxzIiwibWFwIiwibGFiZWwiLCJpZCIsIlZhbHMiLCJ2YWx1ZSIsIml0ZW1zJCIsImZyb21Qcm9taXNlIiwic3luYyIsInN0YXRlIiwiaXRlbXMiLCJzaGFyZSIsIiRmcm9tSW5wdXQiLCJ0ZXh0IiwiY3JlYXRlIiwib2JzZXJ2ZXIiLCJwcm9jZXNzIiwic3Rkb3V0Iiwid3JpdGUiLCJzdGRpbiIsInNldEVuY29kaW5nIiwib24iLCJkYXRhIiwibmV4dCIsIlN0cmluZyIsInRyaW0iLCJjb21wbGV0ZSIsIiRmcm9tSWQiLCJnZXQiLCJzd2l0Y2hNYXAiLCJpdGVtIiwiZmlsdGVyIiwibm9kZSIsInBhcmVudF9pZCIsImNoaWxkcmVuIiwibGVuZ3RoIiwib2YiLCJmcm9tIiwibWVyZ2VNYXAiLCJjaGlsZCIsInRvQXJyYXkiLCJwYXJzZUl0ZW0iLCJnb21vZG9yb3MiLCJmb3JFYWNoIiwibWF0Y2hlcyIsImluZGV4T2YiLCJwdXNoIiwic3VtIiwiZ29tb2Rvcm8iLCJyZWR1Y2UiLCJhY2MiLCJjdXIiLCJ2IiwiTWF0aCIsImFicyIsImNvbmNhdCIsImlucHV0JCIsInRhcmdldCQiLCJpbnB1dCIsInBhcnNlSW50IiwiY2F0Y2giLCJlcnIiLCJtZXNzYWdlIiwicGFyYW1zIiwidXBkYXRlIiwiY29tbWl0IiwidGhlbiIsInN1YnNjcmliZSIsInJlc3BvbnNlIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiZXhpdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFFQTs7Ozs7O0FBRUEsTUFBTUEsVUFBVSx1QkFBUSxnQkFBT0MsS0FBZixDQUFoQjs7QUFDQSxNQUFNQyxNQUFNLGdCQUFPQyxNQUFQLENBQWNDLEdBQWQsQ0FBa0JDLFNBQVNBLE1BQU1DLEVBQWpDLENBQVo7O0FBQ0Es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QUFDQXZELFVBQVF3RCxJQUFSLENBQWEsQ0FBYjtBQUNILENBTEwsRUFNSSxNQUFNO0FBQ0ZILFVBQVFDLEdBQVIsQ0FBWSxNQUFaO0FBQ0F0RCxVQUFRd0QsSUFBUixDQUFhLENBQWI7QUFDSCxDQVRMIiwiZmlsZSI6Ii9Vc2Vycy9obWVuZW5kZXovU291cmNlL2V0b3IvR29tb2Rvcm8vYmFjay9zcmMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQVBJIGZyb20gJ3RvZG9pc3QtanMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyB0b2RvaXN0IGFzIENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy5qc29uJztcblxuY29uc3QgVG9kb2lzdCA9IG5ldyBBUEkoQ29uZmlnLnRva2VuKTtcbmNvbnN0IElkcyA9IENvbmZpZy5sYWJlbHMubWFwKGxhYmVsID0+IGxhYmVsLmlkKTtcbmNvbnN0IFZhbHMgPSBDb25maWcubGFiZWxzLm1hcChsYWJlbCA9PiBsYWJlbC52YWx1ZSk7XG5cbmNvbnN0IGl0ZW1zJCA9IE9ic2VydmFibGVcbiAgICAuZnJvbVByb21pc2UoVG9kb2lzdC5zeW5jKCkpXG4gICAgLm1hcChzdGF0ZSA9PiBzdGF0ZS5pdGVtcylcbiAgICAuc2hhcmUoKTtcblxuY29uc3QgJGZyb21JbnB1dCA9IHRleHQgPT4gT2JzZXJ2YWJsZS5jcmVhdGUoKG9ic2VydmVyKSA9PiB7XG4gICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoYCR7dGV4dH1cXG5gKTtcbiAgICBwcm9jZXNzLnN0ZGluLnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gICAgcHJvY2Vzcy5zdGRpbi5vbignZGF0YScsIChkYXRhKSA9PiB7XG4gICAgICAgIG9ic2VydmVyLm5leHQoU3RyaW5nKGRhdGEpLnRyaW0oKSk7XG4gICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59KTtcblxuY29uc3QgJGZyb21JZCA9IGlkID0+IE9ic2VydmFibGVcbiAgICAuZnJvbVByb21pc2UoVG9kb2lzdC5pdGVtcy5nZXQoaWQpKVxuICAgIC5zd2l0Y2hNYXAoKHsgaXRlbSB9KSA9PiBpdGVtcyRcbiAgICAgICAgLm1hcChpdGVtcyA9PiBpdGVtcy5maWx0ZXIobm9kZSA9PiBTdHJpbmcobm9kZS5wYXJlbnRfaWQpID09PSBTdHJpbmcoaWQpKSlcbiAgICAgICAgLnN3aXRjaE1hcChjaGlsZHJlbiA9PiAhY2hpbGRyZW4ubGVuZ3RoXG4gICAgICAgICAgICA/IE9ic2VydmFibGUub2YoW10pXG4gICAgICAgICAgICA6IE9ic2VydmFibGVcbiAgICAgICAgICAgICAgICAuZnJvbShjaGlsZHJlbilcbiAgICAgICAgICAgICAgICAubWVyZ2VNYXAoY2hpbGQgPT4gJGZyb21JZChjaGlsZC5pZCkpXG4gICAgICAgICAgICAgICAgLnRvQXJyYXkoKSxcbiAgICAgICAgKVxuICAgICAgICAubWFwKGNoaWxkcmVuID0+ICh7IC4uLml0ZW0sIGNoaWxkcmVuIH0pKSxcbiAgICApO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiwgbm8tcmV0dXJuLWFzc2lnbiAqL1xuY29uc3QgcGFyc2VJdGVtID0gKGl0ZW0pID0+IHtcbiAgICBjb25zdCBnb21vZG9yb3MgPSBbXTtcbiAgICAvLyBSZXNldCB0aGUgbGFiZWwgZm9yIHRoaXMgaXRlbS5cbiAgICBpdGVtLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgIGlmIChjaGlsZC5jaGlsZHJlbi5sZW5ndGgpIGNoaWxkID0gcGFyc2VJdGVtKGNoaWxkKTtcbiAgICAgICAgY29uc3QgbWF0Y2hlcyA9IGNoaWxkLmxhYmVsc1xuICAgICAgICAgICAgLmZpbHRlcihsYWJlbCA9PiBJZHMuaW5kZXhPZihsYWJlbCkgIT09IC0xKTtcbiAgICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoKSBnb21vZG9yb3MucHVzaCguLi5tYXRjaGVzKTtcbiAgICB9KTtcbiAgICBpZiAoZ29tb2Rvcm9zLmxlbmd0aCkge1xuICAgICAgICAvLyBEZXRlcm1pbmUgaG93IG1hbnkgZ29tb2Rvcm9zIHRoZSBjaGlsZHJlbiBzdW1cbiAgICAgICAgY29uc3Qgc3VtID0gZ29tb2Rvcm9zXG4gICAgICAgICAgICAubWFwKGdvbW9kb3JvID0+IENvbmZpZy5sYWJlbHMuZmlsdGVyKCh7IGlkIH0pID0+IGlkID09PSBnb21vZG9ybylbMF0udmFsdWUpXG4gICAgICAgICAgICAucmVkdWNlKChhY2MsIGN1cikgPT4gYWNjICsgY3VyLCAwKTtcbiAgICAgICAgLy8gV2hpY2ggb2YgdGhlIGxhYmVsIHZhbHVlcyBpcyB0aGUgY2xvc2VzdCB0byBzdW0/XG4gICAgICAgIGxldCB2YWx1ZSA9IFZhbHNbMF07XG4gICAgICAgIFZhbHNcbiAgICAgICAgICAgIC5mb3JFYWNoKHYgPT4gTWF0aC5hYnMoc3VtIC0gdikgPCBNYXRoLmFicyhzdW0gLSB2YWx1ZSkgJiYgKHZhbHVlID0gdikpO1xuICAgICAgICAvLyBTZXQgdGhlIGNvcnJlc3BvbmRpbmcgbGFiZWwuXG4gICAgICAgIGl0ZW0ubGFiZWxzID0gaXRlbS5sYWJlbHNcbiAgICAgICAgICAgIC5maWx0ZXIobGFiZWwgPT4gSWRzLmluZGV4T2YobGFiZWwpID09PSAtMSlcbiAgICAgICAgICAgIC5jb25jYXQoQ29uZmlnLmxhYmVsc1tWYWxzLmluZGV4T2YodmFsdWUpXS5pZCk7XG4gICAgfVxuICAgIGRlbGV0ZSBpdGVtLmNoaWxkcmVuO1xuICAgIHJldHVybiBpdGVtO1xufTtcbi8qIGVzbGludC1lbmFibGUgbm8tcGFyYW0tcmVhc3NpZ24sIG5vLXJldHVybi1hc3NpZ24gKi9cblxuY29uc3QgaW5wdXQkID0gJGZyb21JbnB1dCgnVHlwZSB0aGUgSUQgZm9yIHRoZSBpdGVtIHRvIGNhbGN1bGF0ZTonKTtcblxuY29uc3QgdGFyZ2V0JCA9IGlucHV0JFxuICAgIC5tYXAoaW5wdXQgPT4gcGFyc2VJbnQoaW5wdXQsIDEwKSlcbiAgICAuc3dpdGNoTWFwKGlkID0+ICRmcm9tSWQoaWQpKSAvLyBnZXQgaXRlbS10cmVlIGZyb20gaWRcbiAgICAuY2F0Y2goZXJyID0+IHRocm93IGBJbnZhbGlkIGlkZW50aWZpZXI6ICR7ZXJyLm1lc3NhZ2V9YClcbiAgICAubWFwKGl0ZW0gPT4gcGFyc2VJdGVtKGl0ZW0pKSAvLyBEZXRlcm1pbmUgcG9tb2Rvcm9zIGZyb20gaXRlbS10cmVlXG4gICAgLy8gVXBkYXRlIHRoZSBpdGVtLlxuICAgIC5zd2l0Y2hNYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0geyBsYWJlbHM6IGl0ZW0ubGFiZWxzIH07XG4gICAgICAgIFRvZG9pc3QuaXRlbXMudXBkYXRlKGl0ZW0uaWQsIHBhcmFtcyk7XG4gICAgICAgIHJldHVybiBUb2RvaXN0XG4gICAgICAgICAgICAuY29tbWl0KClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IGl0ZW0pO1xuICAgIH0pXG4gICAgLnN3aXRjaE1hcCgoeyBsYWJlbHMgfSkgPT4gbGFiZWxzLmZpbHRlcihpZCA9PiBJZHMuaW5kZXhPZihpZCkgIT09IC0xKSlcbiAgICAubWFwKHZhbHVlID0+IGDwn42OICR7Q29uZmlnLmxhYmVsc1tJZHMuaW5kZXhPZih2YWx1ZSldLnZhbHVlfWApO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG50YXJnZXQkLnN1YnNjcmliZShcbiAgICByZXNwb25zZSA9PiBjb25zb2xlLmxvZygnUmVzcG9uc2U6JywgcmVzcG9uc2UpLFxuICAgIGVycm9yID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3I6JywgZXJyb3IpO1xuICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfSxcbiAgICAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdET05FJyk7XG4gICAgICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgICB9LFxuKTtcbi8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuIl19